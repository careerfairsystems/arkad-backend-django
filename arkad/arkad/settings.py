"""
Django settings for arkad project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging
import zoneinfo
import os
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv

load_dotenv(verbose=True)

DEBUG = os.environ.get("DEBUG", "False").lower() == "True".lower()
ENVIRONMENT: str = os.environ.get("SENTRY_ENVIRONMENT", "UNSET_ENVIRONMENT")
if not DEBUG:
    import sentry_sdk

    sentry_sdk.init(
        dsn="https://85c34378971f7dad916b93c671328f7c@o4506696085340160.ingest.us.sentry.io/4509287400996869",
        # Add data like request headers and IP for users,
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
        traces_sample_rate=1.0,  # Adjust this value in production
        # Set profile_session_sample_rate to 1.0 to profile 100%
        # of profile sessions.
        profile_session_sample_rate=1.0,
        # Set profile_lifecycle to "trace" to automatically
        # run the profiler on when there is an active transaction
        profile_lifecycle="trace",
        enable_logs=True,
        environment=ENVIRONMENT,
    )

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
UNSAFE_SECRET_KEY: str = "UNSAFE"
SECRET_KEY: str = os.environ.get("DJANGO_SECRET_KEY", UNSAFE_SECRET_KEY)

if not DEBUG and (SECRET_KEY == UNSAFE_SECRET_KEY):
    raise ValueError("You must set DJANGO_SECRET_KEY to a good secret value")

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS: list[str] = ["backend.arkadtlth.se", "staging.backend.arkadtlth.se"]
CSRF_TRUSTED_ORIGINS = ["https://" + h for h in ALLOWED_HOSTS]
CORS_ALLOW_ALL_ORIGINS = True  # Change this later
CORS_ALLOW_CREDENTIALS = True
if DEBUG:
    ALLOWED_HOSTS.append("127.0.0.1")
    ALLOWED_HOSTS.append("0.0.0.0")
    print("DEBUG ENABLED")

STATICFILES_DIRS = [
    BASE_DIR / "static",  # This is where your static files are located
]
STATIC_ROOT = BASE_DIR / "static_root"
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    "import_export",
    "companies",
    "user_models",
    "student_sessions",
    "event_booking",
    "corsheaders",
    "email_app",
    "jexpo_sync",
    "person_counter",
    "notifications",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Add this line
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "arkad.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "arkad.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "arkad",
        "USER": "arkad_db_user",
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get(
            "DB_HOST", "localhost"
        ),  # Change if using a remote database
        "PORT": "5432",  # Default PostgreSQL port
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Stockholm"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Login settings
LOGIN_URL = "/user/login/"
LOGIN_REDIRECT_URL = "/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "user_models.User"

AWS_SES_REGION_NAME = "eu-north-1"
EMAIL_BACKEND = "django_ses.SESBackend"
AWS_SES_REGION_ENDPOINT = f"email.{AWS_SES_REGION_NAME}.amazonaws.com"
EMAIL_PORT = 465
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = "Arkad No Reply <no-reply@arkadtlth.se>"

# Celery / Redis configuration
REDIS_URL: str | None = os.environ.get("REDIS_URL", "redis://redis:6379/0")
CELERY_BROKER_URL: str | None = os.environ.get("CELERY_BROKER_URL", REDIS_URL)
CELERY_RESULT_BACKEND: str | None = os.environ.get("CELERY_RESULT_BACKEND", REDIS_URL)

CACHES = {
    "default": (
        {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
            "KEY_PREFIX": "arkad",
        }
        if REDIS_URL
        else {
            # Fallback to db cache if REDIS_URL not set (e.g., initial local setup)
            "BACKEND": "django.core.cache.backends.db.DatabaseCache",
            "LOCATION": "arkad_db_cache_table",
        }
    )
}

# Channels configuration
if REDIS_URL and not DEBUG:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [REDIS_URL],
            },
        },
    }
else:
    CHANNEL_LAYERS = {
        "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"},
    }

# Celery specific settings (kept minimal; tune later)
if CELERY_BROKER_URL:
    CELERY_TASK_TRACK_STARTED = True
    CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
    CELERY_BROKER_CONNECTION_MAX_RETRIES = 0
else:
    logging.warning("CELERY_BROKER_URL is not set, Celery will not work!")

FIREBASE_CERT_PATH = BASE_DIR / "firebase_cert.json"
APP_BASE_URL: str = "https://app.arkadtlth.se/"


def make_local_time(dt: datetime) -> datetime:
    """Convert a datetime to Swedish time."""
    swedish_tz = zoneinfo.ZoneInfo(TIME_ZONE)
    return dt.astimezone(swedish_tz)
