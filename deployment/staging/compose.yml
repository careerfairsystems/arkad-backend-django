name: "arkad-backend-staging"

networks:
  traefik:
    external: true
  app_network:

services:
  db:
    extends:
      file: ../shared-compose.yaml
      service: db
    container_name: arkad-staging-db
    ports:
      - "5433:5432"

  redis:
    extends:
      file: ../shared-compose.yaml
      service: redis
    container_name: arkad-staging-redis
    volumes:
      - redis_data_staging:/data

  web:
    extends:
      file: ../shared-compose.yaml
      service: web
    container_name: arkad-staging-web
    environment:
      - SENTRY_ENVIRONMENT=staging
    env_file:
      - .env
    # Override command as we do not require as many workers in staging. 2 should be enough.
    command: sh -c "
      python manage.py collectstatic --no-input &&
      python manage.py createcachetable &&
      python manage.py migrate &&
      gunicorn --workers 2 --timeout 16 arkad.wsgi:application --bind 0.0.0.0:8000
      "

  celery-worker:
    extends:
      file: ../shared-compose.yaml
      service: celery-worker
    container_name: arkad-staging-celery-worker
    command: celery -A arkad_staging worker -l info --concurrency=1 --max-memory-per-child=1048576  # 1GB max memory per child
    environment:
      - SENTRY_ENVIRONMENT=staging
    env_file:
      - .env

  websocket:
    extends:
      file: ../shared-compose.yaml
      service: websocket
    container_name: arkad-staging-websocket
    environment:
      - SENTRY_ENVIRONMENT=staging
    env_file:
      - .env
  nginx:
    extends:
      file: ../shared-compose.yaml
      service: nginx
    container_name: arkad-staging-nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-staging.rule=Host(`staging.backend.arkadtlth.se`)"
      - "traefik.http.routers.app-staging.entrypoints=websecure"
      - "traefik.http.routers.app-staging.tls=true"
      - "traefik.http.routers.app-staging.tls.certresolver=production"
    expose:
      - 80

volumes:
  media_volume:
  static_volume:
  redis_data:
